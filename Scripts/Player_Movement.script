local Player = require "Scripts.Player_Status"

go.property("line0", vmath.vector3(0, 0, 0))
go.property("line1", vmath.vector3(0, 0, 0))
go.property("line2", vmath.vector3(0, 0, 0))
go.property("line3", vmath.vector3(0, 0, 0))
go.property("line4", vmath.vector3(0, 0, 0))

local _line_positions = {}
local _is_moving = false
local _queued_direction = nil
local _held_left = false
local _held_right = false
local _move_timer = 0
local _move_cooldown = Player.Player_move_delay

function init(self)
	msg.post(".", "acquire_input_focus")
	_line_positions = {
		self.line0,
		self.line1,
		self.line2,
		self.line3,
		self.line4
	}
	go.set_position(_line_positions[Player.Player_line + 1])
end

function update(self, dt)
	if _is_moving then
		return
	end

	_move_timer = math.max(_move_timer - dt, 0)

	-- Movimento enfileirado
	if _queued_direction and _move_timer <= 0 then
		if Try_move(_queued_direction) then
			_queued_direction = nil
			_move_timer = _move_cooldown
		else
			-- Se ainda não puder mover na direção enfileirada, cancela a fila
			_queued_direction = nil
		end
		return
	end

	-- Movimento por segurar (opcional)
	if _move_timer <= 0 then
		if _held_left and not _held_right then
			if Try_move("left") then
				_move_timer = _move_cooldown
			end
		elseif _held_right and not _held_left then
			if Try_move("right") then
				_move_timer = _move_cooldown
			end
		end
	end
end

function on_input(self, action_id, action)
	local is_left = action_id == hash("left")
	local is_right = action_id == hash("right")

	-- Atualiza helds
	if is_left then
		_held_left = action.pressed or (_held_left and not action.released)
	end
	if is_right then
		_held_right = action.pressed or (_held_right and not action.released)
	end

	-- Ignora se apertou os dois juntos
	if _held_left and _held_right then
		_queued_direction = nil
		return
	end

	-- Verifica se foi pressionado
	if action.pressed then
		local direction = nil
		if is_left then direction = "left"
		elseif is_right then direction = "right" end

		-- Zera direção anterior que estava bloqueada (corrige o bug!)
		_queued_direction = nil

		if not _is_moving then
			if Try_move(direction) then
				_move_timer = _move_cooldown
			else
				-- Só guarda se for direção válida (não está na borda)
				if Can_move(direction) then
					_queued_direction = direction
				end
			end
		end
	end
end

function Can_move(dir)
	if dir == "left" then
		return Player.Player_line < 4
	elseif dir == "right" then
		return Player.Player_line > 0
	end
	return false
end

function Try_move(dir)
	-- BLOQUEIA MOVIMENTO SE NÃO ESTIVER IDLE/RECHARGE
	if Player.Player_actual_action ~= Player.Player_actions.idle and Player.Player_actual_action ~= Player.Player_actions.recharge then
		return false
	end

	-- CANCELA RECHARGE SE MOVIMENTAR
	if Player.Player_actual_action == Player.Player_actions.recharge then
		msg.post("#Player_Actions", "reset_action")
	end

	-- VERIFICA LIMITES
	if not Can_move(dir) then return false end

	local target_line = Player.Player_line
	if dir == "left" then
		target_line = target_line + 1
	elseif dir == "right" then
		target_line = target_line - 1
	end

	_is_moving = true
	local target_pos = _line_positions[target_line + 1]
	local current_pos = go.get_position()
	local final_pos = vmath.vector3(target_pos.x, target_pos.y, current_pos.z)

	local dash_dir = (dir == "left") and "right" or "left" -- se vai para a esquerda, você está olhando pra direita
	msg.post("#Player_Actions", "play_dash_animation", { direction = dash_dir })

	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, final_pos, go.EASING_INOUTSINE, Player.Player_move_delay, 0, function()
		Player.Player_line = target_line
		msg.post("#Player_Actions", "reset_to_idle")
		_is_moving = false
	end)

	return true
end
